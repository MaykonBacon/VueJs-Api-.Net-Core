// <auto-generated />
using Backend_Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend_Api.Migrations
{
    [DbContext(typeof(AplicacaoDbContext))]
    partial class AplicacaoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Backend_Api.Models.Diretor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FilmeId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilmeId");

                    b.ToTable("Diretores");
                });

            modelBuilder.Entity("Backend_Api.Models.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filmes");
                });

            modelBuilder.Entity("Backend_Api.Models.FilmeLocadora", b =>
                {
                    b.Property<int>("LocadoraId")
                        .HasColumnType("int");

                    b.Property<int>("FilmeId")
                        .HasColumnType("int");

                    b.HasKey("LocadoraId", "FilmeId");

                    b.HasIndex("FilmeId");

                    b.ToTable("FilmeLocadoras");
                });

            modelBuilder.Entity("Backend_Api.Models.Locadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locadoras");
                });

            modelBuilder.Entity("Backend_Api.Models.Diretor", b =>
                {
                    b.HasOne("Backend_Api.Models.Filme", "Filme")
                        .WithMany("Diretors")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filme");
                });

            modelBuilder.Entity("Backend_Api.Models.FilmeLocadora", b =>
                {
                    b.HasOne("Backend_Api.Models.Filme", "Filme")
                        .WithMany("FilmeLocadoras")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Api.Models.Locadora", "Locadora")
                        .WithMany("FilmeLocadoras")
                        .HasForeignKey("LocadoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filme");

                    b.Navigation("Locadora");
                });

            modelBuilder.Entity("Backend_Api.Models.Filme", b =>
                {
                    b.Navigation("Diretors");

                    b.Navigation("FilmeLocadoras");
                });

            modelBuilder.Entity("Backend_Api.Models.Locadora", b =>
                {
                    b.Navigation("FilmeLocadoras");
                });
#pragma warning restore 612, 618
        }
    }
}
